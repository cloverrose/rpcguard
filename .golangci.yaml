linters-settings:
  depguard:
    # If you want to block specific version of module, consider gomodguard
    rules:
      all:
        list-mode: lax
        files:
          - $all
        deny:
          - pkg: "github.com/pkg/errors"
            desc: "Should be replaced by standard lib errors package"
          - pkg: "github.com/stretchr/testify"
            desc: "Please use standard library for tests"
          - pkg: "io/ioutil"
            desc: "replaced by io and os packages since Go 1.16: https://tip.golang.org/doc/go1.16#ioutil"
          - pkg: "github.com/golang/mock/"
            desc: "replaced by go.uber.org/mock/"
          - pkg: "unsafe"
            desc: "unsafe package is dangerous to use"
      main:
        list-mode: lax
        files:
          - $all
          - "!$test"
        deny:
          - pkg: "reflect"
            desc: "Who needs reflection"
          - pkg: "go.uber.org/mock/gomock"
            desc: "Should not use in main"
          - pkg: "github.com/google/go-cmp"
            desc: "Should not use in main"
          - pkg: "github.com/newmo-oss/testid"
            desc: "Should not use in main"

  forbidigo:
    # Forbid the following identifiers (list of regexp).
    # Default: ["^(fmt\\.Print(|f|ln)|print|println)$"]
    forbid:
      # - "^(fmt\\.Print(|f|ln)|print|println)$"
      # Please define util package which use time.Now, we will ignore this file
      - "^time\\.Now.*"
      # Use context.Background instead. It's ok to use only when it's unclear which Context to use.
      - "^context.TODO$"
    # Exclude godoc examples from forbidigo checks.
    # Default: true
    exclude-godoc-examples: true
    # Instead of matching the literal source code,
    # use type information to replace expressions with strings that contain the package name
    # and (for methods and fields) the type name.
    # This makes it possible to handle import renaming and forbid struct fields and methods.
    # Default: false
    analyze-types: true

  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot > alias > localmodule`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/gostaticanalysis) # Custom section: groups all imports with the specified Prefix.
      - prefix(github.com/cloverrose)
      - prefix(github.com/cloverrose/rpcguard/pkg)
      - prefix(github.com/cloverrose/rpcguard)

    # Skip generated files.
    # Default: true
    skip-generated: true

    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    # Default: false
    custom-order: true

  gofumpt:
    # Choose whether to use the extra rules.
    # Default: false
    extra-rules: true

linters:
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - depguard
    - forbidigo
    - gci
    - gofumpt

# Configuration of issue rules
issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  exclude-dirs:
    - bin
